<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="31" tokens="232">
<file line="205" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/configuration/SwarmInvitationWSAPITests.java"/>
<file line="247" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/configuration/SwarmInvitationWSAPITests.java"/>
<codefragment>
<![CDATA[
	public void testRejectInvitation() throws IOException {
		ISwarmClient client2 = SwarmClientFactory.getSwarmClient(
				AccountConfig.getConfiguration2().getHostname(Protocol.HTTP),
				AccountConfig.getConfiguration2().getConfingurationAPIKey());
		assertNotNull(client2);
		assertNotNull(client2.getSwarmInviteClient());
		assertNotNull(AccountConfig.testSwarmId);
		assertNotNull(AccountConfig.testInviteId);
		
		testSendInvite();
		List<Invitation> receivedInvites = client2.getSwarmInviteClient().getRecievedInvitations(AccountConfig.testUserResource2.getResourceId());
		
		assertNotNull(receivedInvites);
		assertTrue(receivedInvites.isEmpty() == false);
		Invitation invite = null;
		
		for (Invitation i : receivedInvites)
			if (i.getId().equals(AccountConfig.testInviteId))
				invite = i;
		
		assertNotNull(invite);
		assertNotNull(invite.getId());
		assertNotNull(invite.getFromUser());
		assertNotNull(invite.getToUser());
		assertNotNull(invite.getResourceId());
		assertNotNull(invite.getStatus());
		assertTrue(invite.getStatus().equals(InvitationState.NEW));
		assertNotNull(invite.getDescription());
		assertTrue(invite.getDescription().equals(description));
		
		Invitation acceptInvite = client2.getSwarmInviteClient().respond(invite.getResourceId(), invite.getId(), InvitationResponse.REJECT);
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="201">
<file line="57" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/participation/ParticipationAPITests.java"/>
<file line="26" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/participation/SessionManagementTests.java"/>
<codefragment>
<![CDATA[
	@Override
	protected void setUp() throws Exception {
		/*
		 * Create a swarm, a resource, and associate them.
		 */
		assertNotNull(AccountConfig.getConfiguration());
		assertNotNull(AccountConfig.getConfiguration2());
		
		
		ISwarmClient client = SwarmClientFactory.getSwarmClient(
				AccountConfig.getConfiguration().getHostname(Configuration.Protocol.HTTP),
				AccountConfig.getConfiguration().getConfingurationAPIKey());
		
		//Delete all pre-existing swarms owned by test user.
		List<SwarmModel> swarms = client.list();
		
		for (SwarmModel sm : swarms) {
			if (sm.getUserId().equals(AccountConfig.getConfiguration().getUsername())) {
				client.destroy(sm.getId());
			}
		}		
		
		String id = client.create(AccountConfig.generateRandomSwarmName(), true, AccountConfig.getTestSwarmDescription());
		AccountConfig.testSwarmId = id;
		
		UserResourceModel urc = client.getUserResourceClient().add(AccountConfig.generateRandomResourceName(), "user resource desc", "pc", 0, 0);
		AccountConfig.testUserResource = urc;
		
		SwarmWSResponse response = client.getSwarmResourceClient().add(AccountConfig.testSwarmId, MemberType.PRODUCER, urc.getResourceId());
		
		assertTrue(!response.isError());
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="201">
<file line="214" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/configuration/SwarmInvitationWSAPITests.java"/>
<file line="302" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/participation/ParticipationAPITests.java"/>
<codefragment>
<![CDATA[
		sendInvite(MemberType.PRODUCER);
		List<Invitation> receivedInvites = client2.getSwarmInviteClient().getRecievedInvitations(AccountConfig.testUserResource2.getResourceId());
		
		assertNotNull(receivedInvites);
		assertTrue(receivedInvites.isEmpty() == false);
		Invitation invite = null;
		
		for (Invitation i : receivedInvites)
			if (i.getId().equals(AccountConfig.testInviteId))
				invite = i;
		
		assertNotNull(invite);
		assertNotNull(invite.getId());
		assertNotNull(invite.getFromUser());
		assertNotNull(invite.getToUser());
		assertNotNull(invite.getResourceId());
		assertNotNull(invite.getStatus());
		assertTrue(invite.getStatus().equals(InvitationState.NEW));
		assertNotNull(invite.getDescription());
		assertTrue(invite.getDescription().equals(description));
		
		Invitation acceptInvite = client2.getSwarmInviteClient().respond(invite.getResourceId(), invite.getId(), InvitationResponse.ACCEPT);
		
		assertNotNull(acceptInvite);
		assertTrue(acceptInvite.getStatus().equals(InvitationState.ACCEPTED));
		assertNotNull(acceptInvite.getAcceptedAt());
	}
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="171">
<file line="256" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/configuration/SwarmInvitationWSAPITests.java"/>
<file line="302" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/participation/ParticipationAPITests.java"/>
<codefragment>
<![CDATA[
		sendInvite(MemberType.PRODUCER);
		List<Invitation> receivedInvites = client2.getSwarmInviteClient().getRecievedInvitations(AccountConfig.testUserResource2.getResourceId());
		
		assertNotNull(receivedInvites);
		assertTrue(receivedInvites.isEmpty() == false);
		Invitation invite = null;
		
		for (Invitation i : receivedInvites)
			if (i.getId().equals(AccountConfig.testInviteId))
				invite = i;
		
		assertNotNull(invite);
		assertNotNull(invite.getId());
		assertNotNull(invite.getFromUser());
		assertNotNull(invite.getToUser());
		assertNotNull(invite.getResourceId());
		assertNotNull(invite.getStatus());
		assertTrue(invite.getStatus().equals(InvitationState.NEW));
		assertNotNull(invite.getDescription());
		assertTrue(invite.getDescription().equals(description));
		
		Invitation acceptInvite = client2.getSwarmInviteClient().respond(invite.getResourceId(), invite.getId(), InvitationResponse.ACCEPT);
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="149">
<file line="172" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/participation/ParticipationAPITests.java"/>
<file line="201" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/participation/ParticipationAPITests.java"/>
<codefragment>
<![CDATA[
			public void messageRecieved(String payload, String fromSwarm, String fromResource, boolean isPublic) {
				System.out.print(fromSwarm);
				System.out.print(" ");
				System.out.print(fromResource);
				System.out.print(" ");
				System.out.println(payload);
				psession1MessageRecieved = true;
			}

			@Override
			public void exceptionOccurred(ExceptionType type, String message) {
				System.err.print(type.toString());
				System.err.print(" ");
				System.err.print(message);
				psession1ExceptionRecieved = true;
			}

			@Override
			public void presenceEvent(String fromSwarm, String fromResource, boolean isAvailable) {
				System.out.print(fromSwarm);
				System.out.print(" ");
				System.out.println(fromResource);
				psession1PresenceMessageRecieved = true;
			}
		});
		
		psession1.join(AccountConfig.testSwarmId, urc.getResourceId());
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="143">
<file line="65" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/participation/SessionManagementTests.java"/>
<file line="102" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/participation/SessionManagementTests.java"/>
<codefragment>
<![CDATA[
	public void test3MinuteSession() throws UnknownHostException, IOException, InterruptedException {
		assertNotNull(AccountConfig.getConfiguration().getHostname(Configuration.Protocol.HTTP));
		assertNotNull(AccountConfig.getConfiguration().getParticipationAPIKey());
		assertNotNull(AccountConfig.testUserResource.getResourceId());
		assertNotNull(AccountConfig.testSwarmId);
		
		ISwarmSession session = SwarmClientFactory.createSwarmSession(
				AccountConfig.getConfiguration().getHostname(Configuration.Protocol.HTTP),
				AccountConfig.getConfiguration().getParticipationAPIKey(),
				AccountConfig.testUserResource.getResourceId(), 
				AccountConfig.testSwarmId);
		
		assertNotNull(session);
		
		assertTrue(session.isConnected());
		SessionTestListener tl = new SessionTestListener();
		session.addListener(tl);
		session.join(AccountConfig.testSwarmId, AccountConfig.testUserResource.getResourceId());
		
		Thread.sleep(60000 * 3);
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="134">
<file line="71" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/configuration/SwarmInvitationWSAPITests.java"/>
<file line="88" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/participation/ParticipationAPITests.java"/>
<codefragment>
<![CDATA[
				AccountConfig.getConfiguration2().getHostname(Configuration.Protocol.HTTP),
				AccountConfig.getConfiguration2().getConfingurationAPIKey());
		
		//Delete all pre-existing swarms owned by test user.	
		for (SwarmModel sm : client2.list()) {
			if (sm.getUserId().equals(AccountConfig.getConfiguration2().getUsername())) {
				client2.destroy(sm.getId());
			}
		}
		
		for (UserResourceModel ur : client2.getUserResourceClient().list())
			client2.getUserResourceClient().destroy(ur.getResourceId());
		
		urc = client2.getUserResourceClient().add(AccountConfig.generateRandomResourceName(), "user resource desc", "pc", 0, 0);
		AccountConfig.testUserResource2 = urc;
		
		//Confirm that original user still has swarm.
		assertTrue(client.list().size() == 1);
	}
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="132">
<file line="49" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/src/com/buglabs/bug/swarm/client/impl/SwarmResourceWSClient.java"/>
<file line="83" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/src/com/buglabs/bug/swarm/client/impl/SwarmResourceWSClient.java"/>
<codefragment>
<![CDATA[
				"/resources");

		//We cannot use a static deserializer here because the json scope of the deserializer does not contain the swarmid.
		Response<List<SwarmResourceModel>> response = httpClient.callGet(
				url, 
				new ResponseDeserializer<List<SwarmResourceModel>>() {

					@Override
					public List<SwarmResourceModel> deserialize(InputStream input, int responseCode, Map<String, List<String>> headers)
							throws IOException {
						if (responseCode == 404)
							return Collections.emptyList();
						
						List<SwarmResourceModel> srml= new ArrayList<SwarmResourceModel>();
						ObjectMapper objectMapper = new ObjectMapper();
						JsonNode jtree = objectMapper.readTree(input);
						
						for (JsonNode jn : jtree)
							srml.add(SwarmResourceModel.deserialize(swarmId, jn));
						
						return srml;		
					}
				});
		
		return response.getContent();
	}

	@Override
	public SwarmWSResponse add(final String swarmId, final MemberType type
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="124">
<file line="180" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/configuration/SwarmInvitationWSAPITests.java"/>
<file line="215" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/configuration/SwarmInvitationWSAPITests.java"/>
<codefragment>
<![CDATA[
		List<Invitation> receivedInvites = client2.getSwarmInviteClient().getRecievedInvitations(AccountConfig.testUserResource2.getResourceId());
		
		assertNotNull(receivedInvites);
		assertTrue(receivedInvites.isEmpty() == false);
		Invitation invite = null;
		
		for (Invitation i : receivedInvites)
			if (i.getId().equals(AccountConfig.testInviteId))
				invite = i;
		
		assertNotNull(invite);
		assertNotNull(invite.getId());
		assertNotNull(invite.getFromUser());
		assertNotNull(invite.getToUser());
		assertNotNull(invite.getResourceId());
		assertNotNull(invite.getStatus());
		assertTrue(invite.getStatus().equals(InvitationState.NEW));
		assertNotNull(invite.getDescription());
		assertTrue(invite.getDescription().equals(description));
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="124">
<file line="51" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/configuration/SwarmInvitationWSAPITests.java"/>
<file line="64" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/participation/ParticipationAPITests.java"/>
<codefragment>
<![CDATA[
				AccountConfig.getConfiguration().getHostname(Configuration.Protocol.HTTP),
				AccountConfig.getConfiguration().getConfingurationAPIKey());
		
		//Delete all pre-existing swarms owned by test user.
		List<SwarmModel> swarms = client.list();
		
		for (SwarmModel sm : swarms) {
			if (sm.getUserId().equals(AccountConfig.getConfiguration().getUsername())) {
				client.destroy(sm.getId());
			}
		}		
		
		String id = client.create(AccountConfig.generateRandomSwarmName(), true, AccountConfig.getTestSwarmDescription());
		AccountConfig.testSwarmId = id;
		
		UserResourceModel urc = client.getUserResourceClient().add(AccountConfig.generateRandomResourceName(), "user resource desc", "pc", 0, 0);
		AccountConfig.testUserResource = urc;
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="111">
<file line="47" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/configuration/SwarmInvitationWSAPITests.java"/>
<file line="40" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/configuration/SwarmResourceWSAPITests.java"/>
<codefragment>
<![CDATA[
		assertFalse(AccountConfig.getConfiguration().getParticipationAPIKey().equals(AccountConfig.getConfiguration2().getParticipationAPIKey()));
		
		ISwarmClient client = SwarmClientFactory.getSwarmClient(
				AccountConfig.getConfiguration().getHostname(Protocol.HTTP),
				AccountConfig.getConfiguration().getConfingurationAPIKey());
		
		//Delete all pre-existing swarms owned by test user.
		List<SwarmModel> swarms = client.list();
		
		for (SwarmModel sm : swarms) {
			if (sm.getUserId().equals(AccountConfig.getConfiguration().getUsername())) {
				client.destroy(sm.getId());
			}
		}		
		
		String id = client.create(AccountConfig.generateRandomSwarmName(), true, AccountConfig.getTestSwarmDescription());
		AccountConfig.testSwarmId = id;
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="105">
<file line="70" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/configuration/SwarmInvitationWSAPITests.java"/>
<file line="59" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/test/com/buglabs/bug/swarm/client/test/configuration/SwarmResourceWSAPITests.java"/>
<codefragment>
<![CDATA[
		ISwarmClient client2 = SwarmClientFactory.getSwarmClient(
				AccountConfig.getConfiguration2().getHostname(Protocol.HTTP),
				AccountConfig.getConfiguration2().getConfingurationAPIKey());		
		
		//Delete all pre-existing swarms owned by test user.	
		for (SwarmModel sm : client2.list()) {
			if (sm.getUserId().equals(AccountConfig.getConfiguration2().getUsername())) {
				client2.destroy(sm.getId());
			}
		}
		
		for (UserResourceModel ur : client2.getUserResourceClient().list())
			client2.getUserResourceClient().destroy(ur.getResourceId());
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="100">
<file line="109" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/src/com/buglabs/bug/swarm/client/impl/AbstractSwarmWSClient.java"/>
<file line="139" path="/home/jconnolly/buglabs/dev/misc/bugswarm-connector/com.buglabs.bug.swarm.client/src/com/buglabs/bug/swarm/client/impl/SwarmSessionImp.java"/>
<codefragment>
<![CDATA[
	}
	
	/**
	 * Given a variable number of <String, String> pairs, construct a Map and
	 * return it with values loaded.
	 * 
	 * @param elements
	 *            name1, value1, name2, value2...
	 * @return a Map and return it with values loaded.
	 */
	public static Map<String, Object> toMap(Object... elements) {
		if (elements.length % 2 != 0) {
			throw new IllegalStateException("Input parameters must be even.");
		}

		Iterator<Object> i = Arrays.asList(elements).iterator();
		Map<String, Object> m = new HashMap<String, Object>();

		while (i.hasNext()) {
			m.put(i.next().toString(), i.next());
		}

		return m;
	}
]]>
</codefragment>
</duplication>
</pmd-cpd>